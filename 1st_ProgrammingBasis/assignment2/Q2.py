'''
1. class SentimentLexicon: contains the data about sentiment scores of words.
2. class Classifier: contains the object sentimentLexicon and judging function for given sentences
3. function main: for texting above classes
4. __main__: run function main

pseudocode:
class SentimentLexicon
    init with variable dict {}(word:score)
    function load(positive path:str, negative path:str)
        read each line of each file
        process each line and add score by private function _addScore
    private function _addScore(lines, score)
        loop lines
            store the sentiment score to the instance variable

class Classifier
    constructor
        instantiated SentimentLexicon object
    function classify(text: str)
        loop text for each word
            sum the sentiment lexicon score
        return total score
'''


class SentimentLexicon:
    """It mantains the instance variable, scoreMap, which store the sentiment scores of words"""

    def __init__(self):
        self.scoreMap = {}  # store the word and its sentiment score

    def load(self, positivePath, negativePath):
        """Reading positive words and negative words file, and store each word sentiment score.

        Args:
            positivePath (str): The path to the file storing positive words.
            negativePath (str): The path to the file storing negative words.
        """
        # Open file and read each line.
        positiveFile = open(positivePath, 'r')
        negativeFile = open(negativePath, 'r')
        positiveLines = positiveFile.readlines()
        negativeLines = negativeFile.readlines()
        positiveFile.close()
        negativeFile.close()

        # Loop lines and store the sentiment score of word.
        self._addScore(positiveLines, 1)
        self._addScore(negativeLines, -1)

    def _addScore(self, lines, score):
        """It is a process that store the score to instance variabale scoreMap in the end.

        Args:
            lines (list[str]): String list generated by file.readlines().
            score (int): The sentiment score which this type of words own (1:positive, -1:negative).
        """
        for word in lines:
            if word[0] == ';' or word == '':  # pass the comment and blank
                pass
            else:
                word = word[0:-1]  # remove the \n symbol
                self.scoreMap[word] = score

    def getScoreMap(self):
        """expose instance variable scoreMap"""
        return self.scoreMap


class Classifier:
    """The class maintain the SentimentLexicon object, and have a classify method to judge sentiment of the given sentence."""

    def __init__(self):
        sentimentLexicon = SentimentLexicon()   # Create SentimentLexicon object
        # Load the file, to get dictionary of sentiment.
        sentimentLexicon.load('positive-words.txt', 'negative-words.txt')
        # Store this object to instance variable of classifier
        self.sentimentLexicon = sentimentLexicon

    def classify(self, text):
        """Measure text's sentiment score.

        Args:
            text (str): The text which need to judge sentiment.

        Returns:
            [int]: The sentiment score.
        """
        cleanText = text.lower()  # change sentence into lowercase
        words = cleanText.split()  # split words
        sumScore = 0  # initial the sum of score
        scoreMap = self.sentimentLexicon.getScoreMap()
        for w in words:
            if w in scoreMap:  # if the word in the map, then add the score
                sumScore += scoreMap[w]
        return sumScore


def main():
    """text above class"""
    classifier = Classifier()
    sentences = [  # text sentences
        'I love Python.',
        'Python is the language I love!',
        'The iPhone is clearly not the most terrible and worst phone ever. It is the best.'
    ]
    results = []
    for sentence in sentences:
        score = classifier.classify(sentence)  # give the score
        result = {'text': sentence, 'sentiment': score}  # generate result
        print(result)
        results.append(result)  # append the result
    return results


if __name__ == "__main__":
    main()
