"""
1. class Film: contains  the  data  about  a  film
2. class Films: holds an instance variable that is a list containingFilmobjects
3. function testWithCondition: iterate filmsList generated by object films, and print specific output
4. function main: function for testing whole code 
5. __main__: run function main
"""


class Film:
    """Contains the data about a film"""

    def __init__(self, title, year, runtime):
        """constructor, initialise the object

        Args:
            title (str): film title
            year (str): year of release
            runtime (str): runtime
        """
        self.title = title
        self.year = year
        self.runtime = runtime

    def getTitle(self):
        return self.title

    def getYear(self):
        return self.year

    def getRuntime(self):
        return self.runtime


class Films:
    """create the object that hold the Film objects in a list"""

    def __init__(self):
        self.fileLines = []  # store each line information from file
        self.list = []  # init list, which is store each film
        pass

    def readFile(self, path):
        """read file from the specific path, and store each line to the instance variable -- fileLines

        Args:
            path (str): the location of the file
        """
        readFile = open(path, 'r')
        self.fileLines = readFile.readlines()
        readFile.close()

    def createFilmsList(self):
        """Get information from instance variable (fileLines), and append it to the self.list
        """
        # access instance variable (file) to get file information, and append File objects to the list
        if len(self.fileLines) < 1:   # if fileLines don't contain, then don't process the next code
            return
        # filter the header, and iterate each line
        for raw in self.fileLines[1:]:
            title, year, runtime = self._getFilmInformation(raw)
            film = Film(title, year, runtime)
            self.list.append(film)

    def _getFilmInformation(self, raw: str):
        """Private method.
        After Observing the file structure, found the rule of each returning feature, 
        so this function can extract the title, release year and runtime from each raw line

        Args:
            raw (str): each file line

        Returns:
            title (str): the title of the film
            year (str): the year of release
            runtime (str): the film runtime, unit is minute
        """

        ''' Because each film have poster_link, we can use Double quotation mark + comma to find the location of filmName
        Then, some titles are separated by commas,
        while some movie titles are separated by double quotes (with commas inside)'''
        title = ""
        # Index of the first character of the title
        titleIndex1 = raw.find('",') + 2
        titleIndex2 = -1    # add initial value to title second index
        if raw[titleIndex1] == '"':  # it means title is separated by double quotes
            titleIndex1 += 1  # add 1 to skip first quote
            titleIndex2 = titleIndex1 + \
                raw[titleIndex1:].find('"')
        else:   # title separated by comma
            titleIndex2 = titleIndex1 + \
                raw[titleIndex1:].find(',')
        # print(titleIndex1, titleIndex2)
        title = raw[titleIndex1:titleIndex2]

        '''After title, the next feature is Release of Year, 
        which is separated by comma'''
        yearIndex1 = titleIndex2 + \
            (2 if raw[titleIndex2] ==
             '"' else 1)  # skip the quote+comma or comma
        # comma which is between year and certificate
        yearIndex2 = yearIndex1 + raw[yearIndex1:].find(',')
        year = raw[yearIndex1:yearIndex2]

        '''runtime: In the file, format like this: year,Certificate,runtime
        so we find the runtime through the index of comma'''
        runtimeIndex1 = (yearIndex2 + 1) + \
            raw[(yearIndex2+1):].find(',') + 1
        # All of runtime unit is min, so we can assume that the default unit is minute.
        runtimeIndex2 = runtimeIndex1 + \
            raw[runtimeIndex1:].find(' ')
        runtime = raw[runtimeIndex1:runtimeIndex2]

        return title, year, runtime

    def getFilmsList(self):
        """return the list of Film objects

        Returns:
            list ([Film]): the list of Film objects
        """
        return self.list


def testWithCondition(filmsList, meetConditionDef):
    """reuse some logic when testing, 
    and it needs to pass call back function meetConditionDef, 
    which should return Boolean to check whether data meet the condition or not

    Args:
        filmsList (list[Film]): list containing all film objects
        meetConditionDef ( Callable((str, int, int)) -> Boolean ): it is a callback function, and it will pass an argument is the tuple(title, year, runtime), and return True if the given condition has satisfied else False
    """
    for film in filmsList:  # iterate filmsList
        title = film.getTitle()
        year = film.getYear()
        runtime = film.getRuntime()
        try:
            year = int(year)   # convert into integer to compare
            runtime = int(runtime)
        except ValueError:
            continue    # if getting error when converting, continue to the next film

        # if meet the condition, then print
        if meetConditionDef((title, year, runtime)):
            print("{} was released in {} and has a runtime of {} minutes.".format(
                title, year, runtime))


def main():
    """for testing above codes"""
    films = Films()  # create films object by Films class
    films.readFile('imdb_top_1000.csv')  # read file
    films.createFilmsList()  # create films list
    filmsList = films.getFilmsList()  # get films list

    # test to meet the specific conditions
    print("test: find films with runtime < 70 min")
    testWithCondition(filmsList, lambda filmInfo: filmInfo[2] < 70)
    print()
    print('test: find films with release year  > 2019')
    testWithCondition(filmsList, lambda filmInfo: filmInfo[1] > 2019)


if __name__ == "__main__":
    main()
